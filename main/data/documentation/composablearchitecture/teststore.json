{"sections":[],"seeAlsoSections":[{"title":"Testing","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA"],"anchor":"Testing","generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@preconcurrency","kind":"attribute"},{"text":" ","kind":"text"},{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"This object aids in writing expressive and exhaustive tests for features built in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each step"},{"type":"text","text":" "},{"type":"text","text":"of the way you must assert exactly how state changed, and how effect emissions were fed back"},{"type":"text","text":" "},{"type":"text","text":"into the system."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See the dedicated "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","isActive":true,"type":"reference"},{"type":"text","text":" article for detailed information on testing."}],"type":"paragraph"},{"level":2,"text":"Exhaustive testing","type":"heading","anchor":"Exhaustive-testing"},{"inlineContent":[{"text":"By default, ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" requires you to exhaustively prove how your feature evolves from","type":"text"},{"text":" ","type":"text"},{"text":"sending use actions and receiving actions from effects. There are multiple ways the test store","type":"text"},{"text":" ","type":"text"},{"text":"forces you to do this:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"After each action is sent you must describe precisely how the state changed from before the","type":"text"},{"text":" ","type":"text"},{"text":"action was sent to after it was sent.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If even the smallest piece of data differs the test will fail. This guarantees that you are","type":"text"},{"text":" ","type":"text"},{"text":"proving you know precisely how the state of the system changes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect sends an"},{"type":"text","text":" "},{"type":"text","text":"action back into the system, you "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" explicitly assert that you expect to receive that"},{"type":"text","text":" "},{"type":"text","text":"action from the effect, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" you must assert how state changed as a result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect actions, the test will"},{"type":"text","text":" "},{"type":"text","text":"fail. This guarantees that you do not accidentally forget about an effect action, and that"},{"type":"text","text":" "},{"type":"text","text":"the sequence of steps you are describing will mimic how the application behaves in reality."}]}]},{"content":[{"inlineContent":[{"text":"All effects must complete by the time the test case has finished running, and all effect","type":"text"},{"text":" ","type":"text"},{"text":"actions must be asserted on.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If at the end of the assertion there is still an in-flight effect running or an unreceived","type":"text"},{"text":" ","type":"text"},{"text":"action, the assertion will fail. This helps exhaustively prove that you know what effects","type":"text"},{"text":" ","type":"text"},{"text":"are in flight and forces you to prove that effects will not cause any future changes to your","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Counter {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"One can assert against its behavior over time:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@MainActor","struct CounterTests {","  @Test","  func basics() async {","    let store = TestStore(","      \/\/ Given: a counter state of 0","      initialState: Counter.State(count: 0),","    ) {","      Counter()","    }","","    \/\/ When: the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then: the count should be 1","      $0.count = 1","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that in the trailing closure of "},{"code":".send(.incrementButtonTapped)","type":"codeVoice"},{"type":"text","text":" we are given a single"},{"type":"text","text":" "},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value to"},{"type":"text","text":" "},{"type":"text","text":"match the state after the action was sent. In this case the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" field changes to "},{"code":"1","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If the change made in the closure does not reflect reality, you will get a test failure with a","type":"text"},{"text":" ","type":"text"},{"text":"nicely formatted failure message letting you know exactly what went wrong:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 42","}"],"type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"code":[" TestStoreFailureTests.State(","-   count: 42","+   count: 1"," )"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}],"type":"paragraph"}],"name":"❌ Failure","type":"aside"},{"inlineContent":[{"text":"For a more complex example, consider the following bare-bones search feature that uses a clock","type":"text"},{"text":" ","type":"text"},{"text":"and cancel token to debounce requests:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Search {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action {","    case queryChanged(String)","    case searchResponse(Result<[String], any Error>)","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.continuousClock) var clock","  private enum CancelID { case search }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let .queryChanged(query):","        state.query = query","        return .run { send in","          try await self.clock.sleep(for: 0.5)","","          await send(.searchResponse(Result { try await self.apiClient.search(query) }))","        }","        .cancellable(id: CancelID.search, cancelInFlight: true)","","      case let .searchResponse(.success(results)):","        state.results = results","        return .none","","      case .searchResponse(.failure):","        \/\/ Do error handling here.","        return .none","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"It can be fully tested by overriding the ","type":"text"},{"type":"codeVoice","code":"apiClient"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continuousClock"},{"text":" dependencies with","type":"text"},{"text":" ","type":"text"},{"text":"values that are fully controlled and deterministic:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Create a test clock to control the timing of effects","let clock = TestClock()","","let store = TestStore(initialState: Search.State()) {","  Search()","} withDependencies: {","  \/\/ Override the clock dependency with the test clock","  $0.continuousClock = clock","","  \/\/ Simulate a search response with one item","  $0.apiClient.search = { _ in","    [\"Composable Architecture\"]","  }",")","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the clock by enough to get past the debounce","await clock.advance(by: 0.5)","","\/\/ Assert that the expected response is received","await store.receive(\\.searchResponse.success) {","  $0.results = [\"Composable Architecture\"]","}"],"type":"codeListing"},{"inlineContent":[{"text":"This test is proving that when the search query changes some search responses are delivered and","type":"text"},{"text":" ","type":"text"},{"text":"state updates accordingly.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If we did not assert that the "},{"code":"searchResponse","type":"codeVoice"},{"type":"text","text":" action was received, we would get the following"},{"type":"text","text":" "},{"type":"text","text":"test failure:"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The store received 1 unexpected action after this one: …"}],"type":"paragraph"},{"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"syntax":null,"type":"codeListing"}],"name":"❌ Failure","type":"aside"},{"inlineContent":[{"type":"text","text":"This helpfully lets us know that we have no asserted on everything that happened in the feature,"},{"type":"text","text":" "},{"type":"text","text":"which could be hiding a bug from us."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Or if we had sent another action before handling the effect’s action we would have also gotten"},{"type":"text","text":" "},{"type":"text","text":"a test failure:"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"Must handle 1 received action before sending an action: …"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"]}],"name":"❌ Failure","type":"aside"},{"inlineContent":[{"text":"All of these types of failures help you prove that you know exactly how your feature evolves as","type":"text"},{"text":" ","type":"text"},{"text":"actions are sent into the system. If the library did not produce a test failure in these","type":"text"},{"text":" ","type":"text"},{"text":"situations it could be hiding subtle bugs in your code. For example, when the user clears the","type":"text"},{"text":" ","type":"text"},{"text":"search query you probably expect that the results are cleared and no search request is executed","type":"text"},{"text":" ","type":"text"},{"text":"since there is no query. This can be done like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["await store.send(.queryChanged(\"\")) {","  $0.query = \"\"","  $0.results = []","}","","\/\/ No need to perform `store.receive` since we do not expect a search","\/\/ effect to execute."],"type":"codeListing"},{"inlineContent":[{"text":"But, if in the future a bug is introduced causing a search request to be executed even when the","type":"text"},{"text":" ","type":"text"},{"text":"query is empty, you will get a test failure because a new effect is being created that is not","type":"text"},{"text":" ","type":"text"},{"text":"being asserted on. This is the power of exhaustive testing.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Non-exhaustive testing","type":"heading","anchor":"Non-exhaustive-testing"},{"inlineContent":[{"text":"While exhaustive testing can be powerful, it can also be a nuisance, especially when testing how","type":"text"},{"text":" ","type":"text"},{"text":"many features integrate together. This is why sometimes you may want to selectively test in a","type":"text"},{"text":" ","type":"text"},{"text":"non-exhaustive style.","type":"text"}],"type":"paragraph"},{"style":"tip","content":[{"inlineContent":[{"text":"The concept of “non-exhaustive test store” was first introduced by","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/www.merowing.info","type":"reference","isActive":true},{"text":" in a ","type":"text"},{"identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","type":"reference","isActive":true},{"text":" and","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/vimeo.com\/751173570","type":"reference","isActive":true},{"text":", and then later became integrated into the","type":"text"},{"text":" ","type":"text"},{"text":"core library.","type":"text"}],"type":"paragraph"}],"name":"Tip","type":"aside"},{"inlineContent":[{"text":"Test stores are exhaustive by default, which means you must assert on every state change, and","type":"text"},{"text":" ","type":"text"},{"text":"how ever effect feeds data back into the system, and you must make sure that all effects","type":"text"},{"text":" ","type":"text"},{"text":"complete before the test is finished. To turn off exhaustivity you can set ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off"},{"text":". When that is done the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":"’s behavior changes:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The trailing closures of "},{"code":"send(_:assert:fileID:file:line:column:)-8f2pl","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"receive(_:timeout:assert:fileID:file:line:column:)-8zqxk","type":"codeVoice"},{"type":"text","text":" no longer need to assert on all"},{"type":"text","text":" "},{"type":"text","text":"state changes. They can assert on any subset of changes, and only if they make an incorrect"},{"type":"text","text":" "},{"type":"text","text":"mutation will a test failure be reported."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"send(_:assert:fileID:file:line:column:)-8f2pl"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"receive(_:timeout:assert:fileID:file:line:column:)-8zqxk"},{"text":" methods are allowed to be","type":"text"},{"text":" ","type":"text"},{"text":"called even when actions have been received from effects that have not been asserted on yet.","type":"text"},{"text":" ","type":"text"},{"text":"Any pending actions will be cleared.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Tests are allowed to finish with unasserted, received actions and in-flight effects. No test","type":"text"},{"text":" ","type":"text"},{"text":"failures will be reported.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Non-exhaustive stores can be configured to report skipped assertions by configuring"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","type":"reference"},{"type":"text","text":". When set to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" the test store will have the"},{"type":"text","text":" "},{"type":"text","text":"added behavior that any unasserted change causes a grey, informational box to appear next to"},{"type":"text","text":" "},{"type":"text","text":"each assertion detailing the changes that were not asserted against. This allows you to see what"},{"type":"text","text":" "},{"type":"text","text":"information you are choosing to ignore without causing a test failure. It can be useful in"},{"type":"text","text":" "},{"type":"text","text":"tracking down bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"},{"inlineContent":[{"text":"This style of testing is most useful for testing the integration of multiple features where you","type":"text"},{"text":" ","type":"text"},{"text":"want to focus on just a certain slice of the behavior. Exhaustive testing can still be important","type":"text"},{"text":" ","type":"text"},{"text":"to use for leaf node features, where you truly do want to assert on everything happening inside","type":"text"},{"text":" ","type":"text"},{"text":"the feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The","type":"text"},{"text":" ","type":"text"},{"text":"user can fill in some data on the screen, then tap the “Submit” button, and then a series of","type":"text"},{"text":" ","type":"text"},{"text":"events happens to  log the user in. Once the user is logged in, the 3rd tab switches from a","type":"text"},{"text":" ","type":"text"},{"text":"login screen to a profile screen, ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" the selected tab switches to the first tab, which is an","type":"text"},{"text":" ","type":"text"},{"text":"activity screen.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When writing tests for the login feature we will want to do that in the exhaustive style so that"},{"text":" ","type":"text"},{"text":"we can prove exactly how the feature would behave in production. But, suppose we wanted to write","type":"text"},{"text":" ","type":"text"},{"text":"an integration test that proves after the user taps the “Login” button that ultimately the","type":"text"},{"text":" ","type":"text"},{"text":"selected tab switches to the first tab.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to test such a complex flow we must test the integration of multiple features, which","type":"text"},{"text":" ","type":"text"},{"text":"means dealing with complex, nested state and effects. We can emulate this flow in a test by","type":"text"},{"text":" ","type":"text"},{"text":"sending actions that mimic the user logging in, and then eventually assert that the selected","type":"text"},{"text":" ","type":"text"},{"text":"tab switched to activity:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","","\/\/ 1️⃣ Emulate user tapping on submit button.","\/\/    (You can use case key path syntax to send actions to deeply nested features.)","await store.send(\\.login.submitButtonTapped) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  …","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(\\.login.loginResponse.success) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  …","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(\\.login.delegate.didLogin) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  …","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We need to be intimately knowledgeable in how the login feature works so that we can assert","type":"text"},{"text":" ","type":"text"},{"text":"on how its state changes and how its effects feed data back into the system.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the login feature were to change its logic we may get test failures here even though the"},{"type":"text","text":" "},{"type":"text","text":"logic we are actually trying to test doesn’t really care about those changes."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"This test is very long, and so if there are other similar but slightly different flows we"},{"type":"text","text":" "},{"type":"text","text":"want to test we will be tempted to copy-and-paste the whole thing, leading to lots of"},{"type":"text","text":" "},{"type":"text","text":"duplicated, fragile tests."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of"},{"type":"text","text":" "},{"type":"text","text":"login causing the selected tab to switch to activity, without having to worry about what is"},{"type":"text","text":" "},{"type":"text","text":"happening inside the login feature. To do this, we can turn off "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"the test store, and then just assert on what we are interested in:"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(App.State()) {","  App()","}","store.exhaustivity = .off  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .activity","}"],"type":"codeListing"},{"inlineContent":[{"text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed","type":"text"},{"text":" ","type":"text"},{"text":"data back into the system. We just assert that when the “Submit” button is tapped that","type":"text"},{"text":" ","type":"text"},{"text":"eventually we get the ","type":"text"},{"code":"didLogin","type":"codeVoice"},{"text":" delegate action and that causes the selected tab to flip to","type":"text"},{"text":" ","type":"text"},{"text":"activity. Now the login feature is free to make any change it wants to make without affecting","type":"text"},{"text":" ","type":"text"},{"text":"this integration test.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off"},{"type":"text","text":" for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" causes all un-asserted changes to pass"},{"type":"text","text":" "},{"type":"text","text":"without any notification. If you would like to see what test failures are being suppressed"},{"type":"text","text":" "},{"type":"text","text":"without actually causing a failure, you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","store.exhaustivity = .off(showSkippedAssertions: true)  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .profile","}"],"type":"codeListing"},{"inlineContent":[{"text":"When this is run you will get grey, informational boxes on each assertion where some change","type":"text"},{"text":" ","type":"text"},{"text":"wasn’t fully asserted on:","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"syntax":"diff","code":["  App.State(","    authenticatedTab: .loggedOut(","      Login.State(","-       isLoading: false","+       isLoading: true,","        …","      )","    )","  )"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Skipped receiving .login(.loginResponse(.success))"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"syntax":"diff","code":["  App.State(","-   authenticatedTab: .loggedOut(…)","+   authenticatedTab: .loggedIn(","+     Profile.State(…)","+   ),","    …","  )"],"type":"codeListing"},{"inlineContent":[{"text":"(Expected: −, Actual: +)","type":"text"}],"type":"paragraph"}],"name":"◽️ Expected failure","type":"aside"},{"inlineContent":[{"type":"text","text":"The test still passes, and none of these notifications are test failures. They just let you know"},{"type":"text","text":" "},{"type":"text","text":"what things you are not explicitly asserting against, and can be useful to see when tracking"},{"type":"text","text":" "},{"type":"text","text":"down bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"roleHeading":"Class","externalID":"s:22ComposableArchitecture9TestStoreC","role":"symbol","title":"TestStore","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"topicSections":[{"title":"Creating a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf"],"anchor":"Creating-a-test-store"},{"title":"Configuring a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor"],"anchor":"Configuring-a-test-store"},{"title":"Testing a reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:assert:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"],"anchor":"Testing-a-reducer"},{"title":"Skipping actions and effects","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:fileID:file:line:column:)"],"anchor":"Skipping-actions-and-effects"},{"title":"Accessing state","abstract":[{"type":"text","text":"While the most common way of interacting with a test store’s state is via its"},{"type":"text","text":" "},{"type":"codeVoice","code":"send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"receive(_:timeout:assert:fileID:file:line:column:)-53wic"},{"type":"text","text":" methods, you may also access it"},{"type":"text","text":" "},{"type":"text","text":"directly throughout a test."}],"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"],"anchor":"Accessing-state"},{"title":"Supporting types","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf"],"anchor":"Supporting-types"},{"title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"],"anchor":"Deprecations"},{"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)-260ck","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)-3qk60","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-7eyvv","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-7hli0","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-2pkzu","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-5521q","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-60mj3","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-6au1z","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-70v94","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-89nav","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8xb5v","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-o2e2","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-87x0y"],"anchor":"Instance-Methods","generated":true}],"kind":"symbol","variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-70v94":{"kind":"symbol","type":"topic","role":"symbol","title":"receive(_:timeout:assert:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-70v94","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"AnyCasePath","preciseIdentifier":"s:13CasePathsCore03AnyA4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-70v94","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-87x0y":{"abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-87x0y","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-87x0y","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"preciseIdentifier":"s:13CasePathsCore0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"title":"send(_:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-6au1z":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-6au1z","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"title":"receive(_:timeout:assert:fileID:file:line:column:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-6au1z","abstract":[{"text":"Asserts an action was received from an effect that matches a predicate, and asserts how the","type":"text"},{"text":" ","type":"text"},{"text":"state changes.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-60mj3":{"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-60mj3","abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-60mj3","title":"receive(_:timeout:assert:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier","text":"UInt64"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:fileID:file:line:column:)":{"url":"\/documentation\/composablearchitecture\/teststore\/assert(_:fileid:file:line:column:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assert","kind":"identifier"},{"text":"((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Assert against the current state of the store.","type":"text"}],"type":"topic","title":"assert(_:fileID:file:line:column:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststoretask","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStoreTask"}],"abstract":[{"type":"text","text":"The type returned from "},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" that represents the"},{"type":"text","text":" "},{"type":"text","text":"lifecycle of the effect started from sending an action."}],"type":"topic","title":"TestStoreTask"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-2wguq":{"title":"send(_:assert:fileID:file:line:column:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"TestStoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"role":"symbol","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-2wguq","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"role":"symbol","title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"title":"exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"abstract":[{"text":"Non-exhaustive assertions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/exhaustivity\/off","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","kind":"symbol","title":"off","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"off","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-8xb5v":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-8xb5v","role":"symbol","title":"receive(_:timeout:assert:fileID:file:line:column:)","abstract":[{"type":"text","text":"Asserts an action was received from an effect that matches a predicate, and asserts how the"},{"type":"text","text":" "},{"type":"text","text":"state changes."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8xb5v","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV","text":"Duration"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"kind":"symbol"},"https://www.merowing.info":{"titleInlineContent":[{"text":"Krzysztof Zabłocki","type":"text"}],"identifier":"https:\/\/www.merowing.info","title":"Krzysztof Zabłocki","url":"https:\/\/www.merowing.info","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"abstract":[{"type":"text","text":"The default timeout used in all methods that take an optional timeout."}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V","text":"UInt64"}],"url":"\/documentation\/composablearchitecture\/teststore\/timeout","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","title":"timeout","type":"topic","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)":{"url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:fileid:file:line:column:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipReceivedActions"},{"kind":"text","text":"("},{"kind":"externalParam","text":"strict"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Clears the queue of received actions from effects."}],"type":"topic","title":"skipReceivedActions(strict:fileID:file:line:column:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-2pkzu":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-2pkzu","abstract":[{"text":"Asserts an action was received from an effect and asserts how the state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-2pkzu","title":"receive(_:timeout:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-89nav":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:13CasePathsCore03AnyA4PathV","text":"AnyCasePath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"abstract":[],"title":"receive(_:timeout:assert:fileID:file:line:column:)","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-89nav","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-89nav","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-7hli0":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-7hli0","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-7hli0","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_SendableCaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"text":" ","type":"text"},{"text":"the state changes.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"kind":"text","text":"("},{"kind":"externalParam","text":"showSkippedAssertions"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","type":"topic","kind":"symbol","role":"symbol","title":"Exhaustivity.off(showSkippedAssertions:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","abstract":[{"type":"text","text":"Non-exhaustive assertions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","url":"\/documentation\/composablearchitecture\/testingtca","role":"article","type":"topic","title":"Testing","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"url":"\/documentation\/composablearchitecture\/teststore\/dependencies","abstract":[{"type":"text","text":"The current dependencies of the test store."}],"title":"dependencies","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependencies","kind":"identifier"},{"text":": ","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"title":"Deprecations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}],"url":"\/documentation\/composablearchitecture\/teststoredeprecations","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreOf":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf","title":"TestStoreOf","url":"\/documentation\/composablearchitecture\/teststoreof","abstract":[{"type":"text","text":"A convenience type alias for referring to a test store of a given reducer’s domain."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStoreOf"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStoreOf"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings(action:)-260ck":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bindings","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ViewAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:13CasePathsCore03AnyA4PathV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"BindingViewStore","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)-260ck","title":"bindings(action:)","role":"symbol","abstract":[],"url":"\/documentation\/composablearchitecture\/teststore\/bindings(action:)-260ck","type":"topic","kind":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-5521q":{"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-5521q","title":"receive(_:timeout:assert:fileID:file:line:column:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-5521q","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:13CasePathsCore0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:withDependencies:fileID:file:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:fileID:file:line:column:)","title":"init(initialState:reducer:withDependencies:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:withdependencies:fileid:file:line:column:)","abstract":[{"type":"text","text":"Creates a test store with an initial state and a reducer powering its runtime."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": () -> some "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"withDependencies"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":")"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings(action:)-3qk60":{"url":"\/documentation\/composablearchitecture\/teststore\/bindings(action:)-3qk60","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)-3qk60","title":"bindings(action:)","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bindings","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ViewAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13CasePathsCore0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","text":"BindingViewStore","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a binding view store for this store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:_:assert:fileID:file:line:column:)":{"abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"title":"send(_:_:assert:fileID:file:line:column:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:13CasePathsCore0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","text":"TestStoreTask"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:_:assert:fileid:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-7eyvv":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:13CasePathsCore0A7KeyPatha","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt64","preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-7eyvv","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-7eyvv","role":"symbol","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-o2e2":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-o2e2","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-o2e2","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:13CasePathsCore0A7KeyPatha","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"receive(_:timeout:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/useMainSerialExecutor":{"url":"\/documentation\/composablearchitecture\/teststore\/usemainserialexecutor","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"useMainSerialExecutor","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Serializes all async work to the main thread for the lifetime of the test store."}],"title":"useMainSerialExecutor","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipInFlightEffects(strict:fileID:file:line:column:)":{"kind":"symbol","role":"symbol","conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipInFlightEffects"},{"kind":"text","text":"("},{"kind":"externalParam","text":"strict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"text":"Cancels any currently in-flight effects.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:fileID:file:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/skipinflighteffects(strict:fileid:file:line:column:)","title":"skipInFlightEffects(strict:fileID:file:line:column:)"},"https://www.merowing.info/exhaustive-testing-in-tca/":{"titleInlineContent":[{"text":"blog post","type":"text"}],"url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","type":"link","title":"blog post"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/isDismissed":{"kind":"symbol","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the store’s feature has been dismissed.","type":"text"}],"title":"isDismissed","url":"\/documentation\/composablearchitecture\/teststore\/isdismissed","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDismissed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:fileID:file:line:column:)-klnc":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:fileid:file:line:column:)-klnc","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"abstract":[{"type":"text","text":"Suspends until all in-flight effects have finished, or until it times out."}],"type":"topic","title":"finish(timeout:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","url":"\/documentation\/composablearchitecture\/teststore\/state","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"}],"type":"topic","title":"state","abstract":[{"text":"The current state of the test store.","type":"text"}]},"https://vimeo.com/751173570":{"url":"https:\/\/vimeo.com\/751173570","title":"conference talk","identifier":"https:\/\/vimeo.com\/751173570","type":"link","titleInlineContent":[{"text":"conference talk","type":"text"}]}}}