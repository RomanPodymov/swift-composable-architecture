{"variants":[{"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Your first feature","category":"The Composable Architecture"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"kind":"project","sections":[{"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}]}],"title":"Your first feature","chapter":"Essentials","estimatedTimeInMinutes":20},{"kind":"tasks","tasks":[{"title":"Create a reducer","stepsSection":[{"runtimePreview":null,"caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before importing the library you will need to depend on it by "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"reference","isActive":true},{"type":"text","text":"."}]}],"style":"note"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture.","type":"text"}]}],"media":null,"type":"step","code":"01-01-01-code-0001.swift"},{"runtimePreview":null,"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro does a few things for you, but at","type":"text"},{"text":" ","type":"text"},{"text":"this point you only need to know that it extends your type to conform to the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol.","type":"text"}]}],"type":"aside","name":"Note"}],"content":[{"inlineContent":[{"type":"text","text":"Define a new struct called "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":", and annotate it with the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro."}],"type":"paragraph"}],"media":null,"type":"step","code":"01-01-01-code-0002.swift"},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Further, if your feature is to be observed by SwiftUI, which is usually the case, you must"},{"type":"text","text":" "},{"type":"text","text":"annotate its state with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. It is the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture’s version of "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":", but tuned to value types."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"To conform to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" you will start with a domain"},{"type":"text","text":" "},{"type":"text","text":"modeling exercise. You will create a "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type that holds the state your feature needs"},{"type":"text","text":" "},{"type":"text","text":"to do its job, typically a struct. Then you will create an "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type that holds all"},{"type":"text","text":" "},{"type":"text","text":"the actions the user can perform in the feature, typically an enum."}],"type":"paragraph"}],"media":null,"type":"step","code":"01-01-01-code-0003.swift"},{"runtimePreview":null,"caption":[{"content":[{"inlineContent":[{"text":"It is best to name the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" cases after literally what the user does in the UI,","type":"text"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"code":"incrementButtonTapped","type":"codeVoice"},{"text":", rather than what logic you want to perform, such as","type":"text"},{"text":" ","type":"text"},{"code":"incrementCount","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"tip","type":"aside","name":"Tip"}],"content":[{"type":"paragraph","inlineContent":[{"text":"For the purpose of a simple counter feature, the state consists of just a single integer,","type":"text"},{"text":" ","type":"text"},{"text":"the current count, and the actions consist of tapping buttons to either increment or","type":"text"},{"text":" ","type":"text"},{"text":"decrement the count.","type":"text"}]}],"media":null,"type":"step","code":"01-01-01-code-0004.swift"},{"runtimePreview":null,"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer is implemented by providing a"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference"},{"type":"text","text":" property, and then listing the"},{"type":"text","text":" "},{"type":"text","text":"reducers inside that you want to compose. Right now we only have one reducer we want to"},{"type":"text","text":" "},{"type":"text","text":"run, and so a simple "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","type":"reference"},{"type":"text","text":" is sufficient, but it is more"},{"type":"text","text":" "},{"type":"text","text":"typical to compose many reducers together, and that will be shown later in the tutorial."}]}],"style":"note","name":"Note"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":", you must implement"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":" property with a"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"type":"text","text":" reducer that evolves the state from its current value to"},{"type":"text","text":" "},{"type":"text","text":"the next value given a user action, and returns any effects that the feature wants to"},{"type":"text","text":" "},{"type":"text","text":"execute in the outside world. This almost always begins by switching on the incoming action"},{"type":"text","text":" "},{"type":"text","text":"to determine what logic you need to perform, and the "},{"type":"codeVoice","code":"state"},{"type":"text","text":" is provided as "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" so you"},{"type":"text","text":" "},{"type":"text","text":"can perform mutations on it directly."}]}],"media":null,"type":"step","code":"01-01-01-code-0005.swift"},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"The logic for this feature is quite simple. We just want to either subtract one or add one"},{"type":"text","text":" "},{"type":"text","text":"to the state’s count. We must also return a value of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"that represents the effect to be executed in the outside world, but in this case we do not"},{"type":"text","text":" "},{"type":"text","text":"need to execute anything. So we can return a special"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"type":"text","text":" value to represent we have no effects to"},{"type":"text","text":" "},{"type":"text","text":"execute."}],"type":"paragraph"}],"media":null,"type":"step","code":"01-01-01-code-0006.swift"},{"inlineContent":[{"text":"That is all it takes to implement a ","type":"text"},{"inlineContent":[{"type":"text","text":"very"}],"type":"emphasis"},{"text":" basic feature in the Composable Architecture.","type":"text"},{"text":" ","type":"text"},{"text":"There is of course a lot more to know about, such as executing effects and feeding data","type":"text"},{"text":" ","type":"text"},{"text":"back into the system, using dependencies in reducers, composing multiple reducers together,","type":"text"},{"text":" ","type":"text"},{"text":"and a lot more. But we will stop here for this feature right now and move onto the view.","type":"text"}],"type":"paragraph"}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fundamental unit that features are built with in the Composable Architecture is the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol. A"},{"type":"text","text":" "},{"type":"text","text":"conformance to that protocol represents the logic and behavior for a feature in your"},{"type":"text","text":" "},{"type":"text","text":"application. This includes how to evolve the current state to the next state when an action is"},{"type":"text","text":" "},{"type":"text","text":"sent into the system, and how effects communicate with the outside world and feed data back"},{"type":"text","text":" "},{"type":"text","text":"into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And most importantly, the feature’s core logic and behavior can be built in full isolation"},{"type":"text","text":" "},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"type":"text","text":" "},{"type":"text","text":"to reuse, and easier to test."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will"},{"type":"text","text":" "},{"type":"text","text":"add more interesting behavior to the feature, but let’s start simple for now."}]}],"mediaPosition":"trailing"}],"anchor":"Create-a-reducer"},{"title":"Integrating with SwiftUI","stepsSection":[{"caption":[],"runtimePreview":null,"code":"01-01-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is our personal preference to keep the reducer and view in the same file until it is"},{"type":"text","text":" "},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"type":"text","text":" "},{"type":"text","text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"and get a basic view into place."}]}],"media":null,"type":"step"},{"caption":[{"style":"tip","type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The store can be held onto as a "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Observation of the data in the store happens"},{"type":"text","text":" "},{"type":"text","text":"automatically with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"type":"text","text":" macro."}]}]}],"runtimePreview":null,"code":"01-01-02-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"The first thing one adds to the view is a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" that is generic"},{"type":"text","text":" "},{"type":"text","text":"over the reducer we constructed in the previous section. The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" represents the runtime"},{"type":"text","text":" "},{"type":"text","text":"of your feature. That is, it is the object that can process actions in order to update"},{"type":"text","text":" "},{"type":"text","text":"state, and it can execute effects and feed data from those effects back into the system."}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[],"runtimePreview":"01-02-image-0003.png","code":"01-01-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Next, we can implement some basic view hierarchy for displaying the count and providing","type":"text"},{"text":" ","type":"text"},{"text":"buttons for incrementing and decrementing.","type":"text"}]}],"media":null,"type":"step"},{"inlineContent":[{"text":"With some basic view scaffolding in place we can now start actually reading state from, and","type":"text"},{"text":" ","type":"text"},{"text":"sending actions to, the ","type":"text"},{"code":"store","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"caption":[],"runtimePreview":null,"code":"01-01-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can read a property of state directly from the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" via dynamic member lookup,"},{"type":"text","text":" "},{"type":"text","text":"and we can send actions to the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" via "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","type":"reference"},{"type":"text","text":"."}]}],"media":null,"type":"step"},{"caption":[{"inlineContent":[{"text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does","type":"text"},{"text":" ","type":"text"},{"text":"indeed change the visible count in the UI.","type":"text"}],"type":"paragraph"}],"runtimePreview":"01-02-video-0005.mp4","code":"01-01-02-code-0005.swift","content":[{"inlineContent":[{"type":"text","text":"Next we want to actually run the feature. We will start with a preview. To do this we will"},{"type":"text","text":" "},{"type":"text","text":"construct a "},{"code":"CounterView","type":"codeVoice"},{"type":"text","text":", and to do that we need to construct a "},{"code":"StoreOf<CounterFeature>","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"type":"text","text":" "},{"type":"text","text":"as well as a trailing closure that specifies the reducer that powers the feature."}],"type":"paragraph"}],"media":null,"type":"step"},{"inlineContent":[{"text":"Before moving onto the next section, let’s quickly show off a super power of the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,","type":"text"},{"text":" ","type":"text"},{"text":"we can run the preview with a completely different reducer to alter how it executes.","type":"text"}],"type":"paragraph"},{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"Notice that the video demonstrates that tapping the buttons does not cause","type":"text"},{"text":" ","type":"text"},{"text":"the count to increase or decrease. That is because we are using the empty reducer in the","type":"text"},{"text":" ","type":"text"},{"text":"preview.","type":"text"}],"type":"paragraph"}]}],"runtimePreview":"01-02-video-0006.mp4","code":"01-01-02-code-0006.swift","content":[{"inlineContent":[{"text":"For example, in the preview, comment out the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer and the store will be","type":"text"},{"text":" ","type":"text"},{"text":"given a reducer that performs no state mutations or effects. This allows us to preview the","type":"text"},{"text":" ","type":"text"},{"text":"design of the feature without worrying about any of its logic or behavior.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[],"runtimePreview":null,"code":"01-01-02-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving on let’s be sure to bring back the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer in the preview,"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}]}],"media":null,"type":"step"},{"inlineContent":[{"text":"That is all there is to implementing a basic feature in the Composable Architecture. The","type":"text"},{"text":" ","type":"text"},{"text":"feature is of course very simple, and doesn’t involve anything interesting like side effects","type":"text"},{"text":" ","type":"text"},{"text":"(which will be the topic of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","type":"reference"},{"text":"), but before any of that let’s see","type":"text"},{"text":" ","type":"text"},{"text":"how to integrate this feature into an application.","type":"text"}],"type":"paragraph"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI view from that feature. This involves a new concept, the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":", which represents the runtime of the feature."}]}]}],"anchor":"Integrating-with-SwiftUI"},{"title":"Integrating into the app","stepsSection":[{"caption":[],"media":null,"code":"01-01-03-code-0001.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"By default the entry point of your application is probably in a file called App.swift"},{"type":"text","text":" "},{"type":"text","text":"and looks something like this code."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"01-01-03-code-0002.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"We will change the entry point of the application so that it constructs a ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and provides a store, just as we did in the preview.","type":"text"}]}]},{"caption":[],"media":null,"code":"01-01-03-code-0003.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" that powers the application should only be created"},{"type":"text","text":" "},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"WindowGroup"},{"type":"text","text":" at the root of the scene. But, it can also be held as a static variable"},{"type":"text","text":" "},{"type":"text","text":"and then provided in the scene."}]}]},{"inlineContent":[{"text":"We can demonstrate another super power of the Composable Architecture. Reducers have a","type":"text"},{"text":" ","type":"text"},{"text":"method called ","type":"text"},{"type":"codeVoice","code":"_printChanges"},{"text":" that is similar to a tool that SwiftUI provides. When used it","type":"text"},{"text":" ","type":"text"},{"text":"will print every action that the reducer processes to the console, and it will print how the","type":"text"},{"text":" ","type":"text"},{"text":"state changed after processing the  action. The method will also go through great lengths to","type":"text"},{"text":" ","type":"text"},{"text":"collapse the state difference to a compact form. This includes not displaying nested state if","type":"text"},{"text":" ","type":"text"},{"text":"it hasn’t changed, and not showing elements in collections that haven’t changed.","type":"text"}],"type":"paragraph"},{"caption":[],"media":null,"code":"01-01-03-code-0004.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"type":"text","text":" "},{"type":"codeVoice","code":"_printChanges(_:)"},{"type":"text","text":" on the reducer."}],"type":"paragraph"}]},{"caption":[],"media":"01-03-image-0005.jpg","code":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few","type":"text"},{"text":" ","type":"text"},{"text":"times you should see logs printed to the console showing you exactly what is happening.","type":"text"}]}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been","type":"text"},{"text":" ","type":"text"},{"text":"able to run it in the preview. Next we need to figure out how to run the feature in the full","type":"text"},{"text":" ","type":"text"},{"text":"application by altering its entry point. This will allow us to run the feature in a simulator","type":"text"},{"text":" ","type":"text"},{"text":"or on a device.","type":"text"}],"type":"paragraph"}]}],"anchor":"Integrating-into-the-app"}]},{"kind":"callToAction","action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","isActive":true},"title":"Adding side effects","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"featuredEyebrow":"Tutorial"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","title":"Reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" protocol for a type.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"estimatedTime":"20min","title":"Your first feature","kind":"project","role":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","title":"Composing reducers","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","title":"What is a side effect?","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Deleting a contact","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"abstract":[{"text":"A type-erased reducer that invokes the given ","type":"text"},{"type":"codeVoice","code":"reduce"},{"text":" function.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reduce","kind":"identifier"}],"navigatorTitle":[{"text":"Reduce","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","url":"\/documentation\/composablearchitecture\/reduce","title":"Reduce","role":"symbol"},"01-02-video-0006.mp4":{"identifier":"01-02-video-0006.mp4","alt":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0006.mp4","traits":["1x","light"]}],"poster":null,"type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","title":"Adding side effects","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","kind":"project","role":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","title":"ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","title":"Testing network requests"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","role":"article"},"http://github.com/pointfreeco/swift-composable-architecture#Installation":{"titleInlineContent":[{"type":"text","text":"adding it to your"},{"type":"text","text":" "},{"type":"text","text":"Xcode project settings or SPM package"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"link","title":"adding it to your Xcode project settings or SPM package"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","title":"Controlling dependencies","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"},"01-01-03-code-0001.swift":{"type":"file","identifier":"01-01-03-code-0001.swift","content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"fileName":"App.swift","highlights":[],"fileType":"swift","syntax":"swift"},"01-01-01-code-0003.swift":{"fileType":"swift","identifier":"01-01-01-code-0003.swift","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    ","  }","  ","  enum Action {","    ","  }","}"],"type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12}],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"type":"topic","role":"symbol","abstract":[],"title":"Effect","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","type":"section","title":"Improve domain modeling","role":"pseudoSymbol","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"title":"Multiple presentation destinations","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","type":"section","role":"pseudoSymbol","title":"Delete contacts","kind":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}]},"01-01-02-code-0001.swift":{"type":"file","identifier":"01-01-02-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"fileName":"CounterFeature.swift","highlights":[],"fileType":"swift","syntax":"swift"},"01-01-01-code-0006.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0006.swift","type":"file","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":23},{"line":24}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"estimatedTime":"1hr 0min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","title":"Testing your feature","kind":"project","type":"topic","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","type":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"pseudoSymbol","title":"Managing a timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"01-01-01-code-0004.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"fileName":"CounterFeature.swift","highlights":[{"line":7},{"line":11},{"line":12}],"syntax":"swift","type":"file","identifier":"01-01-01-code-0004.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","role":"pseudoSymbol"},"01-01-03-code-0003.swift":{"fileType":"swift","identifier":"01-01-03-code-0003.swift","fileName":"App.swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"type":"file","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}],"syntax":"swift"},"01-02-image-0003.png":{"identifier":"01-02-image-0003.png","alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","variants":[{"url":"\/images\/ComposableArchitecture\/01-02-image-0003.png","traits":["1x","light"]}],"type":"image"},"01-01-02-code-0003.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileType":"swift","identifier":"01-01-02-code-0003.swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","syntax":"swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing the add contact flow","role":"pseudoSymbol","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","title":"Composing features","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min","kind":"project","role":"project"},"01-01-02-code-0005.swift":{"type":"file","identifier":"01-01-02-code-0005.swift","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"fileName":"CounterFeature.swift","highlights":[],"fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"title":"Deriving child stores"},"01-01-01-code-0002.swift":{"identifier":"01-01-01-code-0002.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  ","}"],"syntax":"swift","fileName":"CounterFeature.swift","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}]},"01-01-02-code-0002.swift":{"identifier":"01-01-02-code-0002.swift","syntax":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    EmptyView()","  }","}"],"highlights":[{"line":2},{"line":3}],"fileType":"swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","estimatedTime":"30min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body"}],"defaultImplementations":2,"role":"symbol","abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"type":"topic","title":"body"},"01-01-03-code-0002.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"syntax":"swift","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"App.swift","fileType":"swift","identifier":"01-01-03-code-0002.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic","role":"overview","title":"Meet the Composable Architecture"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","kind":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","type":"topic","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]},"01-01-02-code-0004.swift":{"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","highlights":[{"line":6},{"line":13},{"line":21}],"syntax":"swift","type":"file","identifier":"01-01-02-code-0004.swift","fileType":"swift"},"01-01-02-code-0007.swift":{"type":"file","fileName":"CounterFeature.swift","syntax":"swift","identifier":"01-01-02-code-0007.swift","fileType":"swift","highlights":[{"line":4}],"content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"project","kind":"project","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","title":"Testing presentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"kind":"section","title":"Project set up","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","type":"section","title":"Testing the delete contact flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","role":"pseudoSymbol","title":"Integrate reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"title":"send(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","url":"\/documentation\/composablearchitecture\/store\/send(_:)","abstract":[{"text":"Sends an action to the store.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}]},"01-01-01-code-0005.swift":{"fileType":"swift","identifier":"01-01-01-code-0005.swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        ","      case .incrementButtonTapped:","        ","      }","    }","  }","}"],"type":"file","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"01-01-01-code-0001.swift":{"type":"file","identifier":"01-01-01-code-0001.swift","content":["import ComposableArchitecture"],"fileName":"CounterFeature.swift","highlights":[],"fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","title":"Create a reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol","type":"section","kind":"section"},"01-03-image-0005.jpg":{"identifier":"01-03-image-0005.jpg","alt":null,"variants":[{"url":"\/images\/ComposableArchitecture\/01-03-image-0005.jpg","traits":["1x","light"]}],"type":"image"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"kind":"symbol","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"01-01-02-code-0006.swift":{"type":"file","fileName":"CounterFeature.swift","syntax":"swift","identifier":"01-01-02-code-0006.swift","fileType":"swift","highlights":[{"line":4}],"content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      \/\/ CounterFeature()","    }","  )","}"]},"01-01-03-code-0004.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","highlights":[{"line":8}],"syntax":"swift","type":"file","identifier":"01-01-03-code-0004.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","type":"section","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","title":"Navigation stacks","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Integrate views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","title":"none","url":"\/documentation\/composablearchitecture\/effect\/none","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}]},"01-02-video-0005.mp4":{"alt":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0005.mp4","traits":["1x","light"]}],"identifier":"01-02-video-0005.mp4","type":"video","poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"title":"Contact detail feature","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing state changes","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"title":"Adding a tab view","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","title":"Integrating with SwiftUI","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"}}}