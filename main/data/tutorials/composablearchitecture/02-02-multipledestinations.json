{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},"kind":"project","metadata":{"categoryPathComponent":"MeetComposableArchitecture","title":"Multiple presentation destinations","category":"The Composable Architecture","role":"project"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"sections":[{"estimatedTimeInMinutes":30,"kind":"hero","chapter":"Navigation","content":[{"type":"paragraph","inlineContent":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}]}],"title":"Multiple presentation destinations"},{"tasks":[{"anchor":"Delete-contacts","stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action"},{"type":"text","text":" "},{"type":"text","text":"that will be sent when the delete button is tapped on a row in the contacts list."}]}],"media":null,"code":"02-02-01-code-0000.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"type":"text","text":"of the contact."}]},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add a piece of optional "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" state to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" state. We will further use "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" as it allows us to describe all"},{"type":"text","text":" "},{"type":"text","text":"of the details of the alert in a manner that is test friendly since it is "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"02-02-01-code-0001.swift"},{"runtimePreview":null,"type":"step","caption":[{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"The only choices in the alert are to cancel or confirm deletion, but we do not need","type":"text"},{"text":" ","type":"text"},{"text":"to model the cancel action. That will be handled automatically for us.","type":"text"}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new case to the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"’s action that represents the actions that can"},{"type":"text","text":" "},{"type":"text","text":"happen in the alert. We will use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" for this."}]}],"media":null,"code":"02-02-01-code-0002.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have new state modeled in our domain for the presentation of the alert, we can"},{"type":"text","text":" "},{"type":"text","text":"properly implement the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."}]},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"When the delete button is tapped we can populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state in order to ask the user"},{"type":"text","text":" "},{"type":"text","text":"to confirm deletion of the contact."}],"type":"paragraph"}],"media":null,"code":"02-02-01-code-0003.swift"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Integrate the alert’s logic into the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":" by making another use of the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"text":" operator.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-02-01-code-0004.swift"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Listen for when the confirmation action is sent in the alert, and at that time we can"},{"type":"text","text":" "},{"type":"text","text":"actually remove the element from the array."}],"type":"paragraph"}],"media":null,"code":"02-02-01-code-0005.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to integrate the alert it the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" and implement all of its"},{"type":"text","text":" "},{"type":"text","text":"logic. Next we need to integrate the alert into the view. The library ships a special"},{"type":"text","text":" "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(store:)"},{"type":"text","text":" view modifier that is tuned specifically for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"s."}]},{"runtimePreview":null,"type":"step","caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"In order for the ","type":"text"},{"type":"codeVoice","code":"$store.scope"},{"text":" syntax to work you must hold onto the store in the","type":"text"},{"text":" ","type":"text"},{"text":"view using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper, or ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"text":" if you are","type":"text"},{"text":" ","type":"text"},{"text":"targeting older platforms.","type":"text"}]}]}],"content":[{"inlineContent":[{"type":"text","text":"Add the "},{"code":"SwiftUI\/View\/alert(_:)","type":"codeVoice"},{"type":"text","text":" view modifier to the "},{"code":"ContactsView","type":"codeVoice"},{"type":"text","text":", and hand it a"},{"type":"text","text":" "},{"type":"text","text":"store that is scoped to the alert domain."}],"type":"paragraph"}],"media":null,"code":"02-02-01-code-0006.swift"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a button to each row of the contacts list in order to send the ","type":"text"},{"type":"codeVoice","code":"deleteButtonTapped"},{"text":" ","type":"text"},{"text":"action to the store.","type":"text"}]}],"media":null,"code":"02-02-01-code-0007.swift"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Run the app in the preview to see that deletion works as expected. After tapping the trash"},{"type":"text","text":" "},{"type":"text","text":"icon, an alert shows, and if you confirm deletion the item is removed from the list."}],"type":"paragraph"}],"media":"ch02-sub02-sec01-0000.mov","code":null},{"type":"paragraph","inlineContent":[{"text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain","type":"text"},{"text":" ","type":"text"},{"text":"is not modeled as concisely as it could be.","type":"text"}]}],"title":"Delete contacts","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first","type":"text"},{"text":" ","type":"text"},{"text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools","type":"text"},{"text":" ","type":"text"},{"text":"that we used last section, such as ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":", all work"},{"type":"text","text":" "},{"type":"text","text":"for presenting alerts from optional state too."}]}]}]},{"anchor":"Improve-domain-modeling","stepsSection":[{"caption":[],"media":null,"code":"02-02-02-code-0000.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new reducer, called "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":", nested inside the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"reducer will hold the domain and logic for every feature that can be navigated to from"},{"type":"text","text":" "},{"type":"text","text":"the contacts feature, and as such it will be an enum."}]}]},{"caption":[],"media":null,"code":"02-02-02-code-0001.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a case for the “Add contact” feature. Note that we are holding onto the actual"},{"type":"text","text":" "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" reducer in the case, not the state. The"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro will fill in all the requirements for the reducer"},{"type":"text","text":" "},{"type":"text","text":"protocol for us automatically."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"02-02-02-code-0002.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" for the alert state that can be displayed in the"},{"type":"text","text":" "},{"type":"text","text":"feature."}]}]},{"inlineContent":[{"type":"text","text":"That is all it takes to define a single reducer that combines multiple mutually exclusive"},{"type":"text","text":" "},{"type":"text","text":"reducers together. You can expand the macro code in Xcode to see all the code that is"},{"type":"text","text":" "},{"type":"text","text":"being written for you. And if in the future this feature can navigate to another feature,"},{"type":"text","text":" "},{"type":"text","text":"you will only have to add a single case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum."}],"type":"paragraph"},{"caption":[],"media":null,"code":"02-02-02-code-0003.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two pieces of optional "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference"},{"type":"text","text":" with a single"},{"type":"text","text":" "},{"type":"text","text":"optional pointed at "},{"code":"Destination.State","type":"codeVoice"},{"type":"text","text":"."}]}]},{"inlineContent":[{"text":"Note that this now creates a compilation error letting you know that ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.State"},{"text":" ","type":"text"},{"text":"is no longer ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":". This is happening because ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and that type is generated by the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","overridingTitle":"@Reducer","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}]},{"text":" macro.","type":"text"}],"type":"paragraph"},{"caption":[],"media":null,"code":"02-02-02-code-0004.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Extend the macro-generated "},{"code":"Destination.State","type":"codeVoice"},{"type":"text","text":" to apply an "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" conformance."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"02-02-02-code-0005.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two action cases that held onto "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" "},{"type":"text","text":"with a single case that holds onto "},{"type":"codeVoice","code":"Destination.Action"},{"type":"text","text":"."}]}]},{"inlineContent":[{"type":"text","text":"Now our model is more concisely defined, and we have compile time guarantees that only"},{"type":"text","text":" "},{"type":"text","text":"one destination can be active at a time. But, also now have a lot of compiler errors we need"},{"type":"text","text":" "},{"type":"text","text":"to fix."}],"type":"paragraph"},{"caption":[],"media":null,"code":"02-02-02-code-0006.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Instead of populating a piece of ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" optional state in order to drive navigation","type":"text"},{"text":" ","type":"text"},{"text":"to that feature, we will now mutate ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" to point it to the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case.","type":"text"}]}]},{"caption":[],"media":null,"code":"02-02-02-code-0007.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"And when listening for actions happening in child domains we now need to destructure the"},{"type":"text","text":" "},{"code":".destination(.presented(_))","type":"codeVoice"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"type":"text","text":" "},{"type":"text","text":"save the contact."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"02-02-02-code-0008.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"And when the alert confirms deletion of the contact."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"02-02-02-code-0009.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"We can handle all other destination actions by simply returning a ","type":"text"},{"code":".none","type":"codeVoice"},{"text":" effect to","type":"text"},{"text":" ","type":"text"},{"text":"represent there is no other work to perform.","type":"text"}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"02-02-02-code-0010.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Update the state mutation for showing an alert to instead point the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" to the","type":"text"},{"text":" ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" case.","type":"text"}]}]},{"caption":[],"media":null,"code":"02-02-02-code-0011.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Replace the two ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":"s that were used at the bottom of the reducer with a single one that","type":"text"},{"text":" ","type":"text"},{"text":"is focused on the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" domain. It is not even necessary to specify the","type":"text"},{"text":" ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" type in this expression because it can be inferred from how the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"macro was applied to the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" enum.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a"},{"type":"text","text":" "},{"type":"text","text":"single optional enum, and we can now prove that only one destination can be active at a time."},{"type":"text","text":" "},{"type":"text","text":"All that is left is to update the view so that we can specify which case of the destination"},{"type":"text","text":" "},{"type":"text","text":"enum drives the sheet and alert."}],"type":"paragraph"},{"caption":[],"media":null,"code":"02-02-02-code-0012.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you model all of your destinations in a single optional value, you start by scoping to"},{"type":"text","text":" "},{"type":"text","text":"the destination domain and then you further scope into the state and action cases"},{"type":"text","text":" "},{"type":"text","text":"associated with the specific destination using familiar key path dot-chaining syntax. This"},{"type":"text","text":" "},{"type":"text","text":"can be done with familiar dot syntax because the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro applies the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro to each enum."}]}]},{"caption":[],"media":null,"code":"02-02-02-code-0013.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The same can be done for the ","type":"text"},{"code":"alert","type":"codeVoice"},{"text":" view modifier.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"That completes the refactor of the reducer and view to use a single piece of optional enum"},{"type":"text","text":" "},{"type":"text","text":"state instead using multiple optional values. The application works exactly as it did before,"},{"type":"text","text":" "},{"type":"text","text":"but now its domain is more concisely modeled."}],"type":"paragraph"}],"title":"Improve domain modeling","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" can navigate to two possible destinations: either the “Add"},{"type":"text","text":" "},{"type":"text","text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both"},{"type":"text","text":" "},{"type":"text","text":"destinations at once. However, that currently is possible since we are representing each of"},{"type":"text","text":" "},{"type":"text","text":"those destinations as optional pieces of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of invalid states explodes exponentially when you use optionals to represent"},{"type":"text","text":" "},{"type":"text","text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals"},{"type":"text","text":" "},{"type":"text","text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling"},{"type":"text","text":" "},{"type":"text","text":"leaks complexity into your application since you can never truly know which feature is being"},{"type":"text","text":" "},{"type":"text","text":"presented."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s see how to more concisely model our domains for navigating to multiple destinations.","type":"text"}]}]}]}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing presentation","kind":"callToAction"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","role":"article"},"02-02-02-code-0002.swift":{"highlights":[{"line":5}],"fileType":"swift","syntax":"swift","identifier":"02-02-02-code-0002.swift","type":"file","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}"],"fileName":"ContactsFeatures.swift"},"02-02-01-code-0005.swift":{"syntax":"swift","fileType":"swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"identifier":"02-02-01-code-0005.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"kind":"section","title":"Project set up","role":"pseudoSymbol"},"02-02-01-code-0003.swift":{"syntax":"swift","fileType":"swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"identifier":"02-02-01-code-0003.swift","type":"file"},"02-02-01-code-0007.swift":{"syntax":"swift","type":"file","identifier":"02-02-01-code-0007.swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"fileName":"ContactsFeatures.swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"title":"Deriving child stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"02-02-02-code-0012.swift":{"highlights":[{"line":15},{"line":32}],"fileType":"swift","syntax":"swift","identifier":"02-02-02-code-0012.swift","type":"file","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"fileName":"ContactsFeatures.swift"},"02-02-01-code-0000.swift":{"identifier":"02-02-01-code-0000.swift","highlights":[{"line":11},{"line":28},{"line":29},{"line":30}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"fileType":"swift","syntax":"swift","fileName":"ContactsFeatures.swift"},"02-02-02-code-0001.swift":{"highlights":[{"line":4}],"type":"file","identifier":"02-02-02-code-0001.swift","fileType":"swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","  }","}"],"syntax":"swift","fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"project","kind":"project","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","title":"Testing presentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","role":"pseudoSymbol","title":"Integrate reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"section","role":"pseudoSymbol"},"02-02-02-code-0005.swift":{"identifier":"02-02-02-code-0005.swift","fileType":"swift","fileName":"ContactsFeatures.swift","syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    \/\/ case addContact(PresentationAction<AddContactFeature.Action>)","    \/\/ case alert(PresentationAction<Alert>)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"02-02-02-code-0010.swift":{"type":"file","syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47}],"identifier":"02-02-02-code-0010.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","kind":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","type":"topic","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","type":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"pseudoSymbol","title":"Managing a timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","title":"What is a side effect?","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","title":"Composing reducers","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","title":"Reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" protocol for a type.","type":"text"}]},"02-02-02-code-0013.swift":{"highlights":[{"line":38}],"type":"file","identifier":"02-02-02-code-0013.swift","fileType":"swift","syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileName":"ContactsFeatures.swift"},"02-02-02-code-0004.swift":{"highlights":[{"line":8}],"fileType":"swift","syntax":"swift","identifier":"02-02-02-code-0004.swift","type":"file","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}","extension ContactsFeature.Destination.State: Equatable {}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"title":"Adding a tab view","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","role":"pseudoSymbol"},"02-02-01-code-0001.swift":{"identifier":"02-02-01-code-0001.swift","fileType":"swift","fileName":"ContactsFeatures.swift","syntax":"swift","highlights":[{"line":6},{"line":13},{"line":14}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"role":"symbol"},"02-02-01-code-0002.swift":{"highlights":[{"line":12},{"line":15}],"fileType":"swift","syntax":"swift","identifier":"02-02-01-code-0002.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic","role":"overview","title":"Meet the Composable Architecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","title":"Composing features","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min","kind":"project","role":"project"},"02-02-02-code-0009.swift":{"identifier":"02-02-02-code-0009.swift","fileType":"swift","fileName":"ContactsFeatures.swift","syntax":"swift","highlights":[{"line":35},{"line":36},{"line":37}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing the add contact flow","role":"pseudoSymbol","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing state changes","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},"02-02-02-code-0011.swift":{"highlights":[{"line":51},{"line":52}],"fileType":"swift","syntax":"swift","identifier":"02-02-02-code-0011.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination.body","    }","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Deleting a contact","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"estimatedTime":"1hr 0min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","title":"Testing your feature","kind":"project","type":"topic","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","type":"section","role":"pseudoSymbol","title":"Delete contacts","kind":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","title":"Adding side effects","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","kind":"project","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Integrate views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","title":"Testing network requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","title":"Create a reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"kind":"symbol","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","type":"section","title":"Improve domain modeling","role":"pseudoSymbol","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"topic","url":"\/documentation\/composablearchitecture\/presents()","kind":"symbol","abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" and observes it."}],"title":"Presents()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","type":"section","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"02-02-02-code-0000.swift":{"highlights":[],"type":"file","identifier":"02-02-02-code-0000.swift","fileType":"swift","syntax":"swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","title":"Integrating with SwiftUI","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"02-02-02-code-0007.swift":{"highlights":[{"line":27}],"type":"file","identifier":"02-02-02-code-0007.swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift","fileName":"ContactsFeatures.swift"},"ch02-sub02-sec01-0000.mov":{"type":"video","alt":null,"poster":null,"identifier":"ch02-sub02-sec01-0000.mov","variants":[{"url":"\/videos\/ComposableArchitecture\/ch02-sub02-sec01-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"title":"Multiple presentation destinations","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"estimatedTime":"20min","title":"Your first feature","kind":"project","role":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","estimatedTime":"30min"},"02-02-01-code-0004.swift":{"highlights":[{"line":48}],"type":"file","identifier":"02-02-01-code-0004.swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift","fileName":"ContactsFeatures.swift"},"02-02-02-code-0003.swift":{"identifier":"02-02-02-code-0003.swift","fileType":"swift","fileName":"ContactsFeatures.swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    \/\/ @Presents var addContact: AddContactFeature.State?","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"02-02-01-code-0006.swift":{"highlights":[{"line":29}],"type":"file","identifier":"02-02-01-code-0006.swift","fileType":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"syntax":"swift","fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","type":"section","title":"Testing the delete contact flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]},"02-02-02-code-0008.swift":{"highlights":[{"line":31}],"type":"file","identifier":"02-02-02-code-0008.swift","fileType":"swift","syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"title":"Contact detail feature","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","title":"Navigation stacks","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","title":"Controlling dependencies","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"},"02-02-02-code-0006.swift":{"identifier":"02-02-02-code-0006.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23}],"type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileType":"swift","syntax":"swift","fileName":"ContactsFeatures.swift"}}}