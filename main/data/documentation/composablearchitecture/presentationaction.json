{"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"topicSections":[{"anchor":"Enumeration-Cases","generated":true,"title":"Enumeration Cases","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"]},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Equatable-Implementations"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"modules":[{"name":"ComposableArchitecture"}],"title":"PresentationAction","externalID":"s:22ComposableArchitecture18PresentationActionO","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"roleHeading":"Enumeration","symbolKind":"enum","role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"sections":[],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"genericParameter"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Use this wrapper type for modeling a feature’s domain that needs to present a child"},{"type":"text","text":" "},{"type":"text","text":"feature using "},{"type":"codeVoice","code":"Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, if you have a ","type":"text"},{"type":"codeVoice","code":"ChildFeature"},{"text":" reducer that encapsulates the logic and behavior","type":"text"},{"text":" ","type":"text"},{"text":"for a feature, then any feature that wants to present that feature will hold onto","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChildFeature.Action"},{"text":" like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct ParentFeature {","  \/\/ ...","  enum Action {","    case child(PresentationAction<ChildFeature.Action>)","     \/\/ ...","  }","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" enum has two cases that represent the two fundamental operations","type":"text"},{"text":" ","type":"text"},{"text":"you can do when presenting a child feature: ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"text":" represents","type":"text"},{"text":" ","type":"text"},{"text":"an action happening ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"text":" the child feature, and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"text":" represents","type":"text"},{"text":" ","type":"text"},{"text":"dismissing the child feature by ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"-ing its state.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See the dedicated article on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","isActive":true,"type":"reference"},{"text":" for more information on the library’s navigation","type":"text"},{"text":" ","type":"text"},{"text":"tools, and in particular see ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","isActive":true,"type":"reference"},{"text":" for information on modeling navigation","type":"text"},{"text":" ","type":"text"},{"text":"using optionals and enums.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/presentationaction"]}],"seeAlsoSections":[{"anchor":"Tree-based-navigation","generated":true,"title":"Tree-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/Equatable-Implementations":{"kind":"article","type":"topic","title":"Equatable Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Equatable-Implementations","url":"\/documentation\/composablearchitecture\/presentationaction\/equatable-implementations","abstract":[]},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/Decodable-Implementations":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Decodable-Implementations","kind":"article","role":"collectionGroup","type":"topic","title":"Decodable Implementations","url":"\/documentation\/composablearchitecture\/presentationaction\/decodable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"title":"PresentationAction.dismiss","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" presentation state.","type":"text"}],"role":"symbol","title":"PresentationAction.presented(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"topic","url":"\/documentation\/composablearchitecture\/presents()","kind":"symbol","abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" and observes it."}],"title":"Presents()"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/ComposableArchitecture\/Se","type":"unresolvable"},"doc://ComposableArchitecture/13CasePathsCore0A8PathableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP","title":"CasePathsCore.CasePathable"},"doc://ComposableArchitecture/SE":{"title":"Swift.Encodable","identifier":"doc:\/\/ComposableArchitecture\/SE","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/CasePathable-Implementations":{"title":"CasePathable Implementations","kind":"article","abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/CasePathable-Implementations","url":"\/documentation\/composablearchitecture\/presentationaction\/casepathable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"kind":"symbol","title":"Reducer","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","type":"topic","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"text":" ","type":"text"},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"role":"collectionGroup","kind":"article","title":"Navigation","url":"\/documentation\/composablearchitecture\/navigation"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/treebasednavigation","abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"type":"text","text":" "},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"title":"Tree-based navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"type":"topic","role":"symbol","abstract":[],"title":"Effect","kind":"symbol"}}}