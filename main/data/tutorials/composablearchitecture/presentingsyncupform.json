{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm"},"metadata":{"role":"project","title":"Presenting the sync-up form","category":"Building SyncUps","categoryPathComponent":"BuildingSyncUps"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/presentingsyncupform"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[{"title":"Presenting the sync-up form","estimatedTimeInMinutes":10,"content":[{"inlineContent":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"type":"paragraph"}],"kind":"hero","chapter":"Presenting the sync-up form"},{"tasks":[{"stepsSection":[{"inlineContent":[{"type":"text","text":"Go to the SyncUpsList.swift file, where the "},{"type":"codeVoice","code":"SyncUpLists"},{"type":"text","text":" reducer is. We are going to update"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" struct so that it holds onto the state of the child feature to be presented,"},{"type":"text","text":" "},{"type":"text","text":"which is "},{"type":"codeVoice","code":"SyncUpForm.State"},{"type":"text","text":". We will do this by holding onto an optional of the child state,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" represents that the feature is not presented, and non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" represents the feature"},{"type":"text","text":" "},{"type":"text","text":"is presented"}],"type":"paragraph"},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a field to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" struct to hold onto "},{"type":"codeVoice","code":"SyncUpForm.State"},{"type":"text","text":" as an optional. We will"},{"type":"text","text":" "},{"type":"text","text":"also need to use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" macro so that the navigation"},{"type":"text","text":" "},{"type":"text","text":"tools can accomplish certain things under the hood."}],"type":"paragraph"}],"code":"PresentingSyncUpForm-01-code-0001.swift","caption":[],"type":"step"},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum to hold onto a "},{"code":"SyncUpForm.Action","type":"codeVoice"},{"type":"text","text":". We cannot do this"},{"type":"text","text":" "},{"type":"text","text":"directly, but instead will wrap it in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" "},{"type":"text","text":"type, which enhances the child feature’s action enum with an additional"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action that is sent when the user"},{"type":"text","text":" "},{"type":"text","text":"dismisses the feature from the UI, such as swiping down on a sheet."}]}],"code":"PresentingSyncUpForm-01-code-0002.swift","caption":[],"type":"step"},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Since a new case was added to the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum we have to handle it in the reducer.","type":"text"},{"text":" ","type":"text"},{"text":"Currently there is nothing to do, but there will be more to do here soon.","type":"text"}],"type":"paragraph"}],"code":"PresentingSyncUpForm-01-code-0003.swift","caption":[],"type":"step"},{"inlineContent":[{"text":"The state and actions of the two features are now integrated together. Next we need to","type":"text"},{"text":" ","type":"text"},{"text":"integrate the logic and behavior of the features by composing the reducers together.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The way one integrates an optional child feature into a parent feature is via the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" "},{"type":"text","text":"reducer operator. It allows you to single out the presentation domain of a child feature"},{"type":"text","text":" "},{"type":"text","text":"embedded in the parent feature, and then specify the child reducer to run on that domain. It"},{"type":"text","text":" "},{"type":"text","text":"also takes care of a lot of logic for you under the hood, such as the ordering of when the"},{"type":"text","text":" "},{"type":"text","text":"child and parent reducers run, automatically cancelling child effects when its dismissed, and"},{"type":"text","text":" "},{"type":"text","text":"gives you access to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"type":"text","text":" dependency that allows a child feature to dismiss"},{"type":"text","text":" "},{"type":"text","text":"itself without communicating with the parent."}],"type":"paragraph"},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":" operator by specifying key paths to the ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" presentation state","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" presentation action.","type":"text"}],"type":"paragraph"}],"code":"PresentingSyncUpForm-01-code-0004.swift","caption":[],"type":"step"},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We can now properly implement the ","type":"text"},{"type":"codeVoice","code":"addSyncUpButtonTapped"},{"text":" action, which previously we left","type":"text"},{"text":" ","type":"text"},{"text":"blank. All we have to do is populate the ","type":"text"},{"type":"codeVoice","code":"addSyncUp"},{"text":" state, and let the view take care of","type":"text"},{"text":" ","type":"text"},{"text":"observing that the state is non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" and presenting the form.","type":"text"}]}],"code":"PresentingSyncUpForm-01-code-0005.swift","caption":[],"type":"step"},{"inlineContent":[{"type":"text","text":"That is all it takes to integrate two features together using the tools from the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. Notice that we have not yet mentioned "},{"inlineContent":[{"text":"how","type":"text"}],"type":"emphasis"},{"type":"text","text":" we want the"},{"type":"text","text":" "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" to be presented, "},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":" as a sheet, popover, full-screen cover, or something"},{"type":"text","text":" "},{"type":"text","text":"else? The reducer does not care about that detail. It only cares about the domain modeling of"},{"type":"text","text":" "},{"type":"text","text":"the optional feature. You do not need to decide the "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" of navigation until you implement"},{"type":"text","text":" "},{"type":"text","text":"the view layer."}],"type":"paragraph"}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"To present the sync-up form from the sync-ups list we first need to integrate their domains","type":"text"},{"text":" ","type":"text"},{"text":"together. This means the sync-ups list domain will hold onto the state and actions of the","type":"text"},{"text":" ","type":"text"},{"text":"sync-up form.","type":"text"}]}],"mediaPosition":"trailing"}],"anchor":"Integrating-the-feature-domains-together","title":"Integrating the feature domains together"},{"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s present the “Add sync-up” feature in a sheet. It could also be done in a full-screen"},{"type":"text","text":" "},{"type":"text","text":"cover, or any number of navigation styles, but we will start with a sheet."}]},{"code":"PresentingSyncUpForm-02-code-0001.swift","media":null,"type":"step","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"We would like to use the native SwiftUI navigation view modifier, "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":", but it"},{"type":"text","text":" "},{"type":"text","text":"takes a binding to some optional identifiable state that represents if the sheet is being"},{"type":"text","text":" "},{"type":"text","text":"shown."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, how do we derive this binding?"}]},{"type":"paragraph","inlineContent":[{"text":"Luckily the library comes with the tools necessary. Just as there is a scoping operation on","type":"text"},{"text":" ","type":"text"},{"text":"stores for focusing on sub-domains of a parent domain, there is also a scope on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"bindings","type":"text"}]},{"text":" of","type":"text"},{"text":" ","type":"text"},{"text":"stores for doing the same: ","type":"text"},{"type":"codeVoice","code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)"},{"text":". This tool can","type":"text"},{"text":" ","type":"text"},{"text":"be used to derive a binding that is appropriate to pass to ","type":"text"},{"type":"codeVoice","code":"sheet(item:)"},{"text":".","type":"text"}]},{"code":"PresentingSyncUpForm-02-code-0002.swift","media":null,"type":"step","caption":[{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Remember that if the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper is not available to you due to"},{"type":"text","text":" "},{"type":"text","text":"platform restrictions you can instead use the library’s "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper."}],"type":"paragraph"}],"name":"Note"}],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since we want to derive bindings from the store we need to decorate the property in the view"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper."}]}]},{"code":"PresentingSyncUpForm-02-code-0003.swift","media":null,"type":"step","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)","type":"codeVoice"},{"type":"text","text":" operator on "},{"code":"$store","type":"codeVoice"},{"type":"text","text":" to focus"},{"type":"text","text":" "},{"type":"text","text":"the binding to the presentation domain of the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":". The "},{"code":"sheet(item:)","type":"codeVoice"},{"type":"text","text":" modifier will"},{"type":"text","text":" "},{"type":"text","text":"hand the trailing closure a "},{"code":"StoreOf<SyncUpForm>","type":"codeVoice"},{"type":"text","text":", and that is exactly what can be handed to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"SyncUpFormView","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes in the view layer. It’s a simple matter of annotating the store property"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":", using the "},{"type":"codeVoice","code":"scope"},{"type":"text","text":" operator on bindings to deriving stores for the child"},{"type":"text","text":" "},{"type":"text","text":"domain, and hand that over to "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":"."}]},{"code":null,"media":"PresentingSyncUpForm-02-video-0004.mov","type":"step","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Run the app in the preview or simulator to see that it basically works. If we tap the “+”"},{"type":"text","text":" "},{"type":"text","text":"button to see that a sheet with the form comes up. And you can swipe down on the sheet to"},{"type":"text","text":" "},{"type":"text","text":"dismiss it."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"We can also replace ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"popover(item:)","type":"codeVoice"},{"text":", ","type":"text"},{"code":"fullScreenCover(item:)","type":"codeVoice"},{"text":", or any","type":"text"},{"text":" ","type":"text"},{"text":"other SwiftUI view modifier that deals with bindings of optionals to drive navigation.","type":"text"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Now that the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" reducers are integrated together we need to","type":"text"},{"text":" ","type":"text"},{"text":"integrate the feature views together. This can be done using the various navigation view","type":"text"},{"text":" ","type":"text"},{"text":"modifiers that SwiftUI ships with.","type":"text"}],"type":"paragraph"}]}],"anchor":"Integrating-the-feature-views-together","title":"Integrating the feature views together"},{"stepsSection":[{"code":"PresentingSyncUpForm-03-code-0001.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Go to the SyncUpsList.swift file, and wrap the "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" in a navigation stack so"},{"type":"text","text":" "},{"type":"text","text":"that we can add toolbar buttons. Also add buttons for adding and discarding the new sync-up,"},{"type":"text","text":" "},{"type":"text","text":"as well as a title."}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now more clearly see why we would want this view logic in the parent and not the child."},{"type":"text","text":" "},{"type":"text","text":"The title “New sync-up” is domain specific to this situation right here, and would not be"},{"type":"text","text":" "},{"type":"text","text":"appropriate when we start showing this view for editing an existing sync-up. So, we would need"},{"type":"text","text":" "},{"type":"text","text":"extra logic in the child view to separately handle adding versus editing a sync-up. By moving"},{"type":"text","text":" "},{"type":"text","text":"it to the parent we can simplify things."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Right now the toolbar buttons don’t do anything when tapped, so let’s send actions to the"},{"type":"text","text":" "},{"type":"text","text":"store."}]},{"code":"PresentingSyncUpForm-03-code-0002.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Send an action to the store in each button of the toolbar."}],"type":"paragraph"}],"caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These actions are not added to the domain yet and will cause a compiler error. We"},{"type":"text","text":" "},{"type":"text","text":"will fix that next."}]}],"style":"note","type":"aside"}],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We are now sending new actions to the store, and so we have to add those actions to our"},{"type":"text","text":" "},{"type":"text","text":"feature and implement their logic."}]},{"code":"PresentingSyncUpForm-03-code-0003.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Add two cases to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum of the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" reducer that represents confirming"},{"type":"text","text":" "},{"type":"text","text":"the addition of the new sync-up or discarding it."}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null},{"code":"PresentingSyncUpForm-03-code-0004.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Implement the logic for the ","type":"text"},{"code":"confirmAddButtonTapped","type":"codeVoice"},{"text":" action. We will unwrap the ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" ","type":"text"},{"text":"optional state, and append its sync-up data to the ","type":"text"},{"code":"syncUps","type":"codeVoice"},{"text":" array. We also need to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"text":"out the ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" state in order to dismiss the sheet.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null},{"code":"PresentingSyncUpForm-03-code-0005.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the logic for the "},{"code":"discardButtonTapped","type":"codeVoice"},{"type":"text","text":" action by simply "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"-ing out the"},{"type":"text","text":" "},{"code":"addSyncUp","type":"codeVoice"},{"type":"text","text":" state to dismiss the sheet. Nothing else needs to be done."}]}],"caption":[],"media":null,"runtimePreview":null},{"code":null,"type":"step","content":[{"inlineContent":[{"text":"Run the feature in the preview to show that it is possible to complete the full flow of","type":"text"},{"text":" ","type":"text"},{"text":"bringing up the “Add sync-up” sheet and adding a sync-up to the root list.","type":"text"}],"type":"paragraph"}],"caption":[],"media":"PresentingSyncUpForm-03-code-0006.mov","runtimePreview":null}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"We have now integrated the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" features together, both at the","type":"text"},{"text":" ","type":"text"},{"text":"domain level and the view layer. But there is more to their integration. We need to add a","type":"text"},{"text":" ","type":"text"},{"text":"button to the form sheet that allows the user to actually create the sync-up and add it to the","type":"text"},{"text":" ","type":"text"},{"text":"root list.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This can be done in a few ways. We could add the button directly in ","type":"text"},{"type":"codeVoice","code":"SyncUpFormView"},{"text":", but","type":"text"},{"text":" ","type":"text"},{"text":"that could complicate reusing the view, which we will be doing for the editing flow of a sync","type":"text"},{"text":" ","type":"text"},{"text":"up. Instead, we will make it the responsibility of the parent to adorn the child view with","type":"text"},{"text":" ","type":"text"},{"text":"toolbar buttons for saving and discarding the form data.","type":"text"}]}],"kind":"contentAndMedia"}],"anchor":"Adding-a-new-sync-up-to-the-list","title":"Adding a new sync-up to the list"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","title":"Testing the add sync-up flow","kind":"callToAction","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"action":{"overridingTitle":"Get started","type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}]}}],"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form"]]},"references":{"PresentingSyncUpForm-01-code-0003.swift":{"identifier":"PresentingSyncUpForm-01-code-0003.swift","highlights":[{"line":23},{"line":24},{"line":25}],"type":"file","fileName":"SyncUpsList.swift","fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        return .none","","      case .addSyncUp:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","title":"SyncUpsList feature","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"kind":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","role":"pseudoSymbol","type":"section","title":"Navigate to a meeting","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","kind":"section","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"title":"Writing your first test","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"text":".","type":"text"}],"type":"topic","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","role":"project","url":"\/tutorials\/composablearchitecture\/persistingsyncups","title":"Persisting sync-ups","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"role":"project","title":"Editing and deleting a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","estimatedTime":"30min","kind":"project","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","title":"Adding a sync-up","kind":"section","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"type":"section","role":"pseudoSymbol","kind":"section","title":"Adding a new sync-up to the list","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"title":"A basic timer","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"role":"pseudoSymbol","type":"section"},"PresentingSyncUpForm-03-code-0004.swift":{"fileName":"SyncUpsList.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"syntax":"swift","type":"file","identifier":"PresentingSyncUpForm-03-code-0004.swift","fileType":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","role":"pseudoSymbol","title":"Navigating to the record meeting feature","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","title":"Deleting a sync-up","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature, the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"text":" ","type":"text"},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"estimatedTime":"25min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingtimer","kind":"project","role":"project","title":"Adding a meeting timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"role":"pseudoSymbol","title":"Integrating the feature domains together","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"role":"symbol"},"PresentingSyncUpForm-01-code-0002.swift":{"type":"file","identifier":"PresentingSyncUpForm-01-code-0002.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","  }","}"],"fileName":"SyncUpsList.swift","fileType":"swift","highlights":[{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"kind":"section","title":"Creating the app view","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"title":"New sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/new-sync-up-form","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","estimatedTime":"5min","type":"topic","kind":"project","role":"project","title":"The RecordMeeting feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"topic","url":"\/documentation\/composablearchitecture\/presents()","kind":"symbol","abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" and observes it."}],"title":"Presents()"},"PresentingSyncUpForm-02-code-0001.swift":{"identifier":"PresentingSyncUpForm-02-code-0001.swift","highlights":[{"line":23},{"line":24},{"line":25}],"type":"file","fileName":"SyncUpsList.swift","fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  let store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        Button {","","        } label: {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: Binding<Identifiable?>) {","      SyncUpFormView(…)","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"type":"section","title":"Creating the app feature","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","title":"The meeting screen"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"type":"section","title":"Create the sync-up detail","kind":"section","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"kind":"project","role":"project","title":"Presenting the sync-up form","type":"topic","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","estimatedTime":"10min"},"PresentingSyncUpForm-02-video-0004.mov":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/PresentingSyncUpForm-02-video-0004.mov"}],"identifier":"PresentingSyncUpForm-02-video-0004.mov","type":"video","poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","type":"topic","title":"Testing the add sync-up flow","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","role":"project","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","kind":"section","title":"Testing persistence"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","role":"article","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","title":"Lists of sync-ups","abstract":[],"kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","title":"Navigating to the detail","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","title":"Sync-up detail","url":"\/tutorials\/buildingsyncups\/sync-up-detail","role":"article","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","role":"project","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"kind":"project","title":"Testing the list of sync-ups","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","estimatedTime":"5min","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"title":"Navigating to a sync-up detail","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","estimatedTime":"20min","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","role":"project","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"title":"A handy debugging tool","kind":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","title":"Removing attendees","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"url":"\/tutorials\/composablearchitecture\/testingnavigation","role":"project","type":"topic","title":"Testing navigation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"kind":"project","estimatedTime":"10min"},"PresentingSyncUpForm-03-code-0005.swift":{"fileName":"SyncUpsList.swift","fileType":"swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"identifier":"PresentingSyncUpForm-03-code-0005.swift","syntax":"swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"title":"PresentationAction.dismiss","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","type":"section","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"kind":"project","url":"\/tutorials\/composablearchitecture\/listsofsyncups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","estimatedTime":"10min","title":"Lists of sync-ups","role":"project","type":"topic","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","role":"article","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","title":"Persisting sync-ups to disk","abstract":[],"type":"topic","kind":"article"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"kind":"article","title":"Presenting the sync-up form","abstract":[],"role":"article","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","role":"pseudoSymbol","kind":"section","title":"Domain models"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","kind":"overview","role":"overview","url":"\/tutorials\/buildingsyncups","type":"topic","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on","type":"text"},{"text":" ","type":"text"},{"text":"domain modeling, controlling dependencies, and testability.","type":"text"}],"title":"Building SyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","type":"section","title":"Deleting the sync-up","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"updates the parent feature via a shared property. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"title":"Testing the edit flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"},"PresentingSyncUpForm-03-code-0002.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        Button {","","        } label: {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileType":"swift","highlights":[{"line":30},{"line":35}],"fileName":"SyncUpsList.swift","type":"file","syntax":"swift","identifier":"PresentingSyncUpForm-03-code-0002.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"text":" ","type":"text"},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupdetail","type":"topic","estimatedTime":"5min","title":"Sync-up detail","role":"project"},"PresentingSyncUpForm-01-code-0001.swift":{"type":"file","identifier":"PresentingSyncUpForm-01-code-0001.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","  }","}"],"fileName":"SyncUpsList.swift","fileType":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","role":"pseudoSymbol","type":"section","title":"A tour of SyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","type":"section","role":"pseudoSymbol","title":"Create a new feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},"PresentingSyncUpForm-03-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"fileType":"swift","highlights":[{"line":14},{"line":15}],"fileName":"SyncUpsList.swift","type":"file","syntax":"swift","identifier":"PresentingSyncUpForm-03-code-0003.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","kind":"article","title":"What is SyncUps?","url":"\/tutorials\/buildingsyncups\/what-is-syncups-","role":"article","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}],"kind":"section","title":"Persisting data to disk","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"title":"Adding a speech recognizer","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","type":"topic","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"estimatedTime":"10min"},"PresentingSyncUpForm-01-code-0005.swift":{"type":"file","identifier":"PresentingSyncUpForm-01-code-0005.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"fileName":"SyncUpsList.swift","fileType":"swift","highlights":[{"line":21}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"type":"section","title":"Testing the timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","kind":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","type":"topic","title":"Navigating to sync-up detail","kind":"article","role":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"kind":"section","type":"section","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","title":"Create the SyncUps project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"abstract":[],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","type":"topic","url":"\/tutorials\/buildingsyncups\/record-meeting","title":"Record meeting","kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","title":"Integrating the feature views together","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","kind":"section","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"title":"More concise domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","kind":"project","estimatedTime":"5min","type":"topic","role":"project","title":"What is SyncUps?","url":"\/tutorials\/composablearchitecture\/whatissyncups","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","title":"Editing the sync-up","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"title":"Sync-up form","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","estimatedTime":"15min","url":"\/tutorials\/composablearchitecture\/syncupform","role":"project","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"title":"DismissEffect","type":"topic","role":"symbol","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},"PresentingSyncUpForm-03-code-0001.swift":{"identifier":"PresentingSyncUpForm-03-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        Button {","","        } label: {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"syntax":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"type":"file","fileName":"SyncUpsList.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"kind":"project","url":"\/tutorials\/composablearchitecture\/meetingnavigation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","title":"Navigating to a meeting","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"role":"project","type":"topic","estimatedTime":"5min"},"PresentingSyncUpForm-01-code-0004.swift":{"identifier":"PresentingSyncUpForm-01-code-0004.swift","highlights":[{"line":34},{"line":35},{"line":36}],"type":"file","fileName":"SyncUpsList.swift","fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        return .none","","      case .addSyncUp:","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"title":"Controlling dependencies early","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","type":"section","title":"Adding attendees","role":"pseudoSymbol"},"PresentingSyncUpForm-02-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        Button {","","        } label: {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      SyncUpFormView(store: addSyncUpStore)","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileType":"swift","highlights":[{"line":23},{"line":24}],"fileName":"SyncUpsList.swift","type":"file","syntax":"swift","identifier":"PresentingSyncUpForm-02-code-0003.swift"},"PresentingSyncUpForm-03-code-0006.mov":{"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/PresentingSyncUpForm-03-code-0006.mov"}],"poster":null,"alt":null,"identifier":"PresentingSyncUpForm-03-code-0006.mov","type":"video"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"updates the parent feature via a shared property. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"type":"topic","role":"project","estimatedTime":"10min","title":"Testing the sync-up detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"type":"section","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","kind":"section","role":"pseudoSymbol","title":"Sync-up form basics"},"PresentingSyncUpForm-02-code-0002.swift":{"type":"file","identifier":"PresentingSyncUpForm-02-code-0002.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        Button {","","        } label: {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: Binding<Identifiable?>) {","      SyncUpFormView(…)","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileName":"SyncUpsList.swift","fileType":"swift","highlights":[{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","title":"Form focus: an approach","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"role":"project","kind":"project","title":"Testing the sync-up form","url":"\/tutorials\/composablearchitecture\/testingsyncupform","estimatedTime":"10min","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"section","title":"Form focus: a better approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","type":"section","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"title":"Asking for speech recognition permission","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","type":"section","title":"Ending the meeting early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","role":"pseudoSymbol","kind":"section"}}}