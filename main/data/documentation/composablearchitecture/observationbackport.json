{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"sections":[],"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs"},{"type":"text","text":" "},{"type":"text","text":"observation tools, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" we have backported those tools to work in iOS 13 and later. Using the"},{"type":"text","text":" "},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"type":"text","text":" "},{"type":"text","text":"aware of."}]},{"type":"heading","level":2,"anchor":"The-Perception-framework","text":"The Perception framework"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"text":" ","type":"text"},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"text":" ","type":"text"},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, instead of the ","type":"text"},{"type":"codeVoice","code":"@Observable"},{"text":" macro, there is the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"text":" macro:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Perceptible","class CounterModel {","  var count = 0","}"]},{"type":"paragraph","inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"text":" ","type":"text"},{"text":"remember to wrap the contents of your view in the ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":" view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This will make sure that the view subscribes to any fields accessed in the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"text":" model so","type":"text"},{"text":" ","type":"text"},{"text":"that changes to those fields invalidate the view and cause it to re-render.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If a field of a ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"text":" model is accessed in a view while ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" inside","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", then a runtime warning will be triggered:","type":"text"}]},{"type":"aside","name":"üü£ Runtime Warning","content":[{"inlineContent":[{"text":"Perceptible state was accessed but is not being tracked. Track changes to","type":"text"},{"text":" ","type":"text"},{"text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack","type":"text"},{"text":" ","type":"text"},{"text":"frames displayed to find the line in your view where you are accessing state without being inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Bindings","text":"Bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"type":"text","text":" for more information), then you"},{"type":"text","text":" "},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is iOS 17+. So, the Perception library comes with a tool that can be used in"},{"type":"text","text":" "},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"heading","level":2,"anchor":"Gotchas","text":"Gotchas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"type":"heading","level":3,"anchor":"Lazy-view-closures","text":"Lazy view closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"type":"text","text":" "},{"type":"text","text":"not necessarily in the same stack frames as the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view. For example, the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure of "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" is called "},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view has been computed."}]},{"type":"paragraph","inlineContent":[{"text":"This means that even if you wrap the body of the view in ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚Ä¶the access to the row‚Äôs "},{"code":"store.title","type":"codeVoice"},{"type":"text","text":" happens "},{"inlineContent":[{"text":"outside","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":", and hence will"},{"type":"text","text":" "},{"type":"text","text":"not work and will trigger a runtime warning as described above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"]},{"type":"heading","level":3,"anchor":"Mixing-legacy-and-modern-features-together","text":"Mixing legacy and modern features together"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"type":"text","text":" "},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","isActive":true,"type":"reference"},{"text":" for more information about this.","type":"text"}]}],"kind":"content"}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"title":"Observation backport"},"seeAlsoSections":[{"generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"anchor":"Integrations"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit","type":"topic","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","title":"ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","deprecated":true,"type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"title":"Incrementally migrating","abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","url":"\/documentation\/composablearchitecture\/bindings","title":"Working with SwiftUI bindings","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"topic","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","role":"article","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true,"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"role":"symbol","title":"ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration"}}}