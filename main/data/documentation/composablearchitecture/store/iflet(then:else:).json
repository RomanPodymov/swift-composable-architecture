{"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"title":"Combine integration","anchor":"Combine-integration"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"externalParam","text":"then"},{"kind":"text","text":" "},{"kind":"internalParam","text":"unwrap"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":" = {}) -> any "},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"A function that is called with a store of non-optional state when the store’s","type":"text"},{"text":" ","type":"text"},{"text":"state is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", or whenever it goes from ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"unwrap"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that is called when the store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", or whenever it"},{"type":"text","text":" "},{"type":"text","text":"goes from non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"name":"else"}],"kind":"parameters"},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A cancellable that maintains a subscription to updates whenever the store’s state"},{"type":"text","text":" "},{"type":"text","text":"goes from "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and vice versa, so that the caller can react to these changes."}]}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"text":"If the store’s state is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", it will safely unwrap the value and bundle it into a new","type":"text"},{"text":" ","type":"text"},{"text":"store of non-optional state that is passed to the first closure. If the store’s state is","type":"text"},{"text":" ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the second closure is called instead.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This method is useful for handling navigation in UIKit. The state for a screen the user wants","type":"text"},{"text":" ","type":"text"},{"text":"to navigate to can be held as an optional value in the parent, and when that value goes from","type":"text"},{"text":" ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", or non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", you can update the navigation stack accordingly:","type":"text"}],"type":"paragraph"},{"code":["class ParentViewController: UIViewController {","  let store: Store<ParentState, ParentAction>","  var cancellables: Set<AnyCancellable> = []","  \/\/ ...","  func viewDidLoad() {","    \/\/ ...","    store","      .scope(state: \\.optionalChild, action: \\.child)","      .ifLet(","        then: { [weak self] childStore in","          self?.navigationController?.pushViewController(","            ChildViewController(store: childStore),","            animated: true","          )","        },","        else: { [weak self] in","          guard let self else { return }","          navigationController?.popToViewController(self, animated: true)","        }","      )","      .store(in: &cancellables)","  }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use 'observe' and 'if let store.scope', instead."}],"type":"paragraph"}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"platforms":[],"role":"symbol","extendedModule":"ComposableArchitecture","symbolKind":"method","externalID":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF","title":"ifLet(then:else:)"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/store\/iflet(then:else:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","type":"topic","role":"symbol","deprecated":true,"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","title":"publisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit","type":"topic","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable","kind":"typeIdentifier"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","title":"ifLet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"role":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher","type":"topic","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","title":"publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations","kind":"article","title":"Deprecations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/storedeprecations"}}}