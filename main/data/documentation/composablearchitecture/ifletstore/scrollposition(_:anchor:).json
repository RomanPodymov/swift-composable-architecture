{"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"nonisolated"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scrollPosition"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"position"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier","text":"Binding"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7SwiftUI14ScrollPositionV","kind":"typeIdentifier","text":"ScrollPosition"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"anchor"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI9UnitPointV","kind":"typeIdentifier","text":"UnitPoint"},{"kind":"text","text":"? = nil) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"},{"kind":"text","text":"\n"}]}],"kind":"declarations"}],"metadata":{"extendedModule":"SwiftUICore","modules":[{"relatedModules":["SwiftUICore"],"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"scrollPosition(_:anchor:)","platforms":[{"unavailable":false,"introducedAt":"18.0","beta":false,"name":"iOS","deprecated":false},{"unavailable":false,"introducedAt":"15.0","beta":false,"name":"macOS","deprecated":false},{"unavailable":false,"introducedAt":"18.0","beta":false,"name":"tvOS","deprecated":false},{"unavailable":false,"introducedAt":"2.0","beta":false,"name":"visionOS","deprecated":false},{"unavailable":false,"introducedAt":"11.0","beta":false,"name":"watchOS","deprecated":false}],"symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scrollPosition"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier","text":"Binding"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7SwiftUI14ScrollPositionV","kind":"typeIdentifier","text":"ScrollPosition"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"anchor"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI9UnitPointV","kind":"typeIdentifier","text":"UnitPoint"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"externalID":"s:7SwiftUI4ViewPAAE14scrollPosition_6anchorQrAA7BindingVyAA06ScrollE0VG_AA9UnitPointVSgtF::SYNTHESIZED::s:22ComposableArchitecture10IfLetStoreV"},"abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"View.scrollPosition(_:anchor:)"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/ifletstore\/scrollposition(_:anchor:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/scrollPosition(_:anchor:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","type":"topic","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/scrollPosition(_:anchor:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/scrollPosition(_:anchor:)","abstract":[],"kind":"symbol","title":"scrollPosition(_:anchor:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scrollPosition","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7SwiftUI14ScrollPositionV","text":"ScrollPosition","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"anchor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9UnitPointV","text":"UnitPoint","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/scrollposition(_:anchor:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"title":"Deprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuideprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","title":"View Implementations","abstract":[]}}}